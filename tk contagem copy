import tkinter as tk
from tkinter import ttk
from tkinter import messagebox
from pynput import keyboard

contador_1 = 0 
contador_2 = 0

def formata_contador(contador, valor):
    return f"Contador {contador}: {valor}"
def conta_1():
    global contador_1 , l_contador_1 
    contador_1 += 1 
    l_contador_1["text"] = formata_contador(1, contador_1)

def conta_2():
    global contador_2 , l_contador_2
    contador_2 += 1 
    l_contador_2["text"] = formata_contador(2, contador_2)

raiz = tk.Tk()
raiz.title("Contadores")
raiz.geometry ("250x100")
quadro = ttk.Frame(raiz)

raiz.palavra = ttk.Entry(raiz.quadro)
raiz.palavra.pack()

l_contador_1 = ttk.Label(quadro, text = formata_contador(1, contador_1))
l_contador_1.pack()
botao_1 = ttk.Button(quadro, text = "Adiciona ao contador 1", command = conta_1)
botao_1.pack()
l_contador_2 = ttk.Label(quadro, text = formata_contador(2, contador_2))
l_contador_2.pack ()
botao_2 = ttk.Button (quadro, text = "Adiciona ao contador 2", command = conta_2)
botao_2.pack()
quadro.pack(expand = True)


def cria_quadro (self):
    self.quadro = ttk.Frame(self)
    self.l_palavra = ttk.Label(self.quadro, text = "palavra:")
    self.l_palavra.pack()
    self.palavra = ttk.Entry(self.quadro)
    self.palavra.pack()

    
def on_press(key):
    try:
        print(f'Alphanumeric key pressed: {key.char}')
    except AttributeError:
        print(f'Special key pressed: {key}')
def on_release(key):
    print(f'Key released: {key}')
    if key == keyboard.Key.esc:
        # Stop listener
        return False

# Collect events until released
with keyboard.Listener(
        on_press=on_press,
        on_release=on_release) as listener:
    print 

listener.join()
print("Listener Stoped")
raiz.mainloop()